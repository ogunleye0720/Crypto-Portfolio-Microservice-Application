pipeline {
  agent any
  tools{

  }
  stages {
    stage('Install Dependencies') {
      steps{
          sh 'npm install -g @angular/cli'
          sh 'npm install @angular-devkit/build-angular --force'
          sh 'npm install'
      }
    }
    stage('Unit Test') {
      steps{
          sh 'ng test --watch=false --code-coverage'
      }
    }
    stage('lint Test') {
      steps{
          sh 'ng lint'
      }
    }
    stage('Build Stage') {
      steps{
          sh 'ng build --prod'
      }
    }
    stage('OWASP Source Composition Analysis') {
      steps{
          dependencyCheck additionalArguments: '--scan ./' , odcInstallation: 'DP-Check'
          dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
      }
    }
    stage('Static Application Security Test') {
      steps{
          withSonarQubeEnv('sonarserver') {
            sh '''$ SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=clientside \
            -Dsonar.projectkey=clientside '''
          }
      }
    }
    stage("Quality gate"){
      steps{
          script {
            waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-token'
          }
      }
    }
    stage('Building and Pushing to Docker Hub') {
      steps {
        script {
          withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
            sh "docker build -t ogunleye0720/clientside:${BUILD_TAG} ."
            sh "docker push ogunleye0720/clientside:${BUILD_TAG}"
          }
        }
      }
    }
    stage('Image Scanning Using TRIVY') {
      steps {
        sh "trivy image ogunleye0720/clientside:${BUILD_TAG} > trivy.txt"
      }
    }
    stage('QA Testin'){
      steps {
        sh 'docker rm -f qacontainer'
        sh 'docker run -d --name qacontainer -p 80:80 ogunleye0720/clientside:latest'
        sleep time: 60, unit: 'SECONDS'
        retry(5){
          sh 'curl --silent http://jenkins_ip:80'
        }
      }
      post {
        success {
            echo "QA was successful !!!!"
        }
        failure {
          emailext(
            attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>" +
                "<h1>QA Testing failed</h1>",
            to: 'adminemail@gmail.com',
            attachmentsPattern: 'trivy.txt'
          )
        }
      }
    }
  }

}
