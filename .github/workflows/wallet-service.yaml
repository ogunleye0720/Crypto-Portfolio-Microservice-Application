name: Wallet-service-ci

env:
  COIN_MARKET_CAP_API_KEY: ${{ secrets.COIN_MARKET_CAP_API_KEY }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
  POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
  AVALANCHE_API_KEY: ${{ secrets.AVALANCHE_API_KEY }}

on:
  workflow_dispatch:

jobs:
  # Stage 1: Build & Test
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./wallet-service
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

  # Stage 2: SonarCloud Analysis
  sonarcloud:
    needs: build-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./wallet-service
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Compile the project first (Sonar needs .class files in target/classes)
      - name: Compile with Maven (no tests)
        run: mvn -B clean compile -DskipTests

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./wallet-service
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.verbose=true
            -Dsonar.java.binaries=target/classes


  # Stage 3: Docker Build (with semantic version)
  docker-build:
    needs: [build-test, sonarcloud]
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.meta.outputs.image_name }}
      version: ${{ steps.meta.outputs.version }}
      image: ${{ steps.meta.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.REGISTRY_PASS }}" | docker login -u "${{ secrets.REGISTRY_USER }}" --password-stdin

      - name: Bump version and create tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ""

      - name: Build Docker Image
        id: meta
        run: |
          IMAGE_NAME=docker.io/${{ secrets.REGISTRY_USER }}/wallet-service
          VERSION=${{ steps.tag_version.outputs.new_tag }}
          IMAGE=$IMAGE_NAME:$VERSION

          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT

          docker build -t $IMAGE -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ github.sha }} ./wallet-service
          docker save $IMAGE -o image.tar
          # Save image as artifact
          docker save $IMAGE -o image.tar
        shell: bash

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: wallet-service-image
          path: image.tar

  # Stage 4: Trivy Security Scan
  trivy-scan:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: wallet-service-image
          path: .

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          input: image.tar
          format: 'table'
          exit-code: '0'
          severity: 'HIGH,CRITICAL'

  # Stage 5: Push to DockerHub
  docker-push:
    needs: [docker-build, trivy-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.REGISTRY_PASS }}" | docker login -u "${{ secrets.REGISTRY_USER }}" --password-stdin

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: wallet-service-image
          path: .

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Push Docker images
        run: |
          IMAGE_NAME="docker.io/${{ secrets.REGISTRY_USER }}/wallet-service "
          VERSION=${{ needs.docker-build.outputs.version }}
        
          # Debug: Print values to verify they're not empty
          echo "IMAGE_NAME: $IMAGE_NAME"
          echo "VERSION: $VERSION"
        
          # Tag the loaded image with all required tags
          docker tag $IMAGE_NAME:$VERSION $IMAGE_NAME:latest
        
          # Push all tags
          docker push $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:latest 
