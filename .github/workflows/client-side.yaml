name: Frontend CI
on:
  push:
    branches: [ "main" ]

jobs:
  # Stage 1: Install Angular
  install-angular:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client-side

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: client-side/package-lock.json

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

  # Stage 2: Code Analysis with Sonar Cloud
  sonarcloud:
    needs: install-angular
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: SonarQubeScan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: client-side/src
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.verbose=true

  # Stage 3: Build Docker Image (no push yet)
  docker-build:
    needs: [install-angular, sonarcloud]
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.meta.outputs.image_name }}
      version: ${{ steps.meta.outputs.version }}
      image: ${{ steps.meta.outputs.image }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.REGISTRY_PASS }}" | docker login -u "${{ secrets.REGISTRY_USER }}" --password-stdin

      # Generate new semantic version (bump based on commits)
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ""

      - name: Build Docker images
        id: meta
        run: |
          IMAGE_NAME=docker.io/${{ secrets.REGISTRY_USER }}/client-side
          VERSION=${{ steps.tag_version.outputs.new_tag }}
          IMAGE=$IMAGE_NAME:$VERSION
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          
          # Build images with multiple tags (but do not push yet)
          docker build -t $IMAGE_NAME:$VERSION -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ github.sha }} ./client-side

          # Save image as artifact
          docker save $IMAGE -o image.tar
        shell: bash
        
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-image
          path: image.tar

  # Stage 4: Trivy Security Scan
  trivy-scan:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: client-image
          path: .

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          input: image.tar
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Stage 5: Push Docker image (only if scan passes)
  docker-push:
    needs: [docker-build, trivy-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.REGISTRY_PASS }}" | docker login -u "${{ secrets.REGISTRY_USER }}" --password-stdin

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: client-image
          path: .

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Push Docker images
        run: |
          IMAGE_NAME=${{ needs.docker-build.outputs.image_name }}
          VERSION=${{ needs.docker-build.outputs.version }}
        
          # Debug: Print values to verify they're not empty
          echo "IMAGE_NAME: $IMAGE_NAME"
          echo "VERSION: $VERSION"
          echo "SHA: ${{ github.sha }}"
        
          # Tag the loaded image with all required tags
          docker tag $IMAGE_NAME:$VERSION $IMAGE_NAME:latest
          docker tag $IMAGE_NAME:$VERSION $IMAGE_NAME:${{ github.sha }}
        
          # Push all tags
          docker push $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}  
